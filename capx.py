# -*- coding: utf-8 -*-
"""CapX.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18nrU5fgeSOxwOBPbsFAC7ZYGfQWnA_XW
"""

pip install praw textblob scikit-learn

pip install praw pandas

import praw
import pandas as pd

# Reddit API credentials (replace with your credentials)
CLIENT_ID = 'VhccZ4opBCd6Zxawq_plVw'
CLIENT_SECRET = '-2UJXYsu1auhIjjSgheoXG4TBIkG3Q'
USER_AGENT = 'StockAnalysisBot v1.0 by /u/DiscussionDull5543'

# Initialize Reddit API
reddit = praw.Reddit(client_id=CLIENT_ID, client_secret=CLIENT_SECRET, user_agent=USER_AGENT)

# Function to fetch Reddit posts
def fetch_reddit_posts(subreddit_name, query, limit=100):
    posts = []
    subreddit = reddit.subreddit(subreddit_name)
    for submission in subreddit.search(query, limit=limit):
        posts.append({
            "Title": submission.title,
            "Content": submission.selftext,
            "Upvotes": submission.score,
            "Comments": submission.num_comments,
            "Posted On": submission.created_utc
        })
    return pd.DataFrame(posts)

# Example Usage
data = fetch_reddit_posts('stocks', 'AAPL', limit=200)  # Subreddit: 'stocks', Query: 'AAPL'
print(data.head())

pip install textblob

from textblob import TextBlob

# Function to clean text
def clean_text(text):
    text = text.lower()
    text = ''.join(char for char in text if char.isalnum() or char.isspace())
    return text

# Add sentiment analysis to DataFrame
def analyze_sentiment(data):
    data['Cleaned Content'] = data['Content'].apply(lambda x: clean_text(x))
    data['Polarity'] = data['Cleaned Content'].apply(lambda x: TextBlob(x).sentiment.polarity)
    data['Sentiment'] = data['Polarity'].apply(lambda x: 1 if x > 0 else 0)  # 1: Positive, 0: Negative
    return data

# Perform analysis
analyzed_data = analyze_sentiment(data)
print(analyzed_data.head())

pip install scikit-learn

from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, precision_score, recall_score

# Simulate stock movements (for demonstration purposes)
analyzed_data['StockMovement'] = analyzed_data['Sentiment']  # Positive sentiment = upward movement

# Prepare data for modeling
X = analyzed_data['Cleaned Content']
y = analyzed_data['StockMovement']

# Convert text to features
vectorizer = CountVectorizer()
X = vectorizer.fit_transform(X)

# Split into train and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train model
model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Predict and evaluate
y_pred = model.predict(X_test)
print(f"Accuracy: {accuracy_score(y_test, y_pred):.2f}")
print(f"Precision: {precision_score(y_test, y_pred):.2f}")
print(f"Recall: {recall_score(y_test, y_pred):.2f}")